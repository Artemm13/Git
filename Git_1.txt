JSON

 1. Создать внешний репозиторий c названием JSON.
 В GitHub нажимаем "New" --> в "Repository name" пишем JSON и нажимаем кнопку "Create repository".

 2. Клонировать репозиторий JSON на локальный компьютер.
 Через терминал заходим в необходимую папку на компе: cd QA/GIT (/Users/artemm/QA/GIT). Пишем в терминале команду: git clone и вставляем ссылку из GitHub: https://github.com/Artemm13/JSON.git

 3. Внутри локального JSON создать файл “new.json”.
 В терминале пишем команду: touch new.json

 4. Добавить файл под гит.
 В терминале пишем команду: git add .

 5. Закоммитить файл.
 В терминале пишем команду: git commit -m "Commit json"

 6. Отправить файл на внешний GitHub репозиторий.
 В терминале пишем команду: git push

 7. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
 Пишем команду: vim new.json В открывшемся редакторе нажимаем клавишу "i" и пишем текст: 
{
"name": "Mishchenko Artem",
"age": 37,
"pets": 1,
"future_salary": 4000
}
Переходим в нормальный режим (клавиша "esc"), сохраняем - :w, и выходим - :q.


 8. Отправить изменения на внешний репозиторий.
 Пишем: git add . 
        git commit -m "Changes json" 
        git push

 9. Создать файл preferences.json
 Пишем команду: touch preferences.json


 10. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
 Пишем команду: vim preferences.json и пишем текст редакторе:
{
"favorite_movie": "Matrix",
"favorite_show": "Friends",
"favorite_food": "kebab",
"favorite_time_of_year": "Autumn",
"country_you_would_like_to_visit": "Netherlands"
}

 11. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
 Пишем команды: touch skills.json
                vim skills.json
{
 "skills": [
   "Linux terminal",
   "GitHub",
   "Postman",
   "SQL",
   "DevTools",
   "Mobile testing",
   "Fidler and Charles"
 ]
}

 12. Отправить сразу 2 файла на внешний репозиторий.
 Пишем команды: git add preferences.json skills.json
                git commit -m "Commit preferences.json and skills.json"
                git push

 13. На веб интерфейсе создать файл bug_report.json. 
 В GitHab нажимаем "Add file" --> "Create new file" --> пишем название файла "bug_report.json"

 14. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Нажимаем кнопку "Commit changes" --> при необходимости заполняем поле "Extended description" и нажимаем "Commit changes".

 15. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 Открываем файл "bug_report.json" --> выбираем иконку "Edit this file" --> пишем баг репорт:
{
  "id": 111,
  "summary": "The filter is not reset when the 'Filter reset' button is pressed",
  "steps": [
    "1. Go to exe.ua",
    "2. In the catalog, select the category 'PC components', 'Video cards'",
    "3. Filtering goods by 'graphic chip'. Choose from the list RTX 3060 Ti",
    "4. Press the 'Filter products' button",
    "5. Press the 'Filter reset' button",
  ]
  "expected_result": "The filter is reset",
  "actual_result": "The filter is not reset",
  "severity": "Low",
  "priority": "Medium",
  "type": "Functional",
  "assigned": "Artem M",
  "state": "Open",
  "date_of_creation": "01-11-2022",
  "environment": "Windows 10, Chrome 106.0.5249.119",
  "attachment": "https://...",
}

 16. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Нажимаем кнопку "Commit changes" --> при необходимости заполняем поле "Extended description" и нажимаем "Commit changes".

 17. Синхронизировать внешний и локальный репозиторий JSON
 Пишем в терминале команду: git pull origin main



XML

 18. Создать внешний репозиторий c названием XML.
 В GitHub нажимаем "New" --> в "Repository name" пишем XML и нажимаем кнопку "Create repository".

 19. Клонировать репозиторий XML на локальный компьютер.
 Через терминал заходим в необходимую папку на компе: cd QA/GIT (/Users/artemm/QA/GIT). Пишем в терминале команду: git clone и вставляем ссылку из GitHub: https://github.com/Artemm13/XML.git

 20. Внутри локального XML создать файл “new.xml”.
 В терминале пишем команду: touch new.xml

 21. Добавить файл под гит.
 В терминале пишем команду: git add .

 22. Закоммитить файл.
 В терминале пишем команду: git commit -m "Commit xml"

 23. Отправить файл на внешний GitHub репозиторий.
 В терминале пишем команду: git push

 24. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 Пишем команду: vim new.xml В открывшемся редакторе нажимаем клавишу "i" и пишем текст:
 <personal_data>
   <name>Artem Mishchenko</name>
   <age>37</age>
   <pets>1</pets>
   <future_salary>4000</future_salary>
</personal_data>
Переходим в нормальный режим (клавиша "esc"), сохраняем - :w и выходим - :q

 25. Отправить изменения на внешний репозиторий.
 Пишем: git add . 
        git commit -m "Changes xml" 
        git push

 26. Создать файл preferences.xml
 Пишем команду: touch preferences.xml

 27. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 Пишем команду: vim preferences.xml и пишем текст редакторе:
<preferences>
   <favorite_movie>Matrix</favorite_movie>
   <favourite_show>Friends</favourite_show>
   <favourite_food>kebab</favourite_food>
   <favourite_time_of_year>Autumn</favourite_time_of_year>
   <country_you_would_like_to_visit>Netherlands</country_you_would_like_to_visit>
</preferences>

 28. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 Пишем команды: touch skills.xml
                vim skills.xml
 <skills>
    <skill>Linux terminal</skill>
    <skill>GitHub</skill>
    <skill>Postman</skill>
    <skill>SQL</skill>
    <skill>DevTools</skill>
    <skill>Mobile testing</skill>
    <skill>Fidler and Charles</skill>
</skills>

 29. Сделать коммит в одну строку.
 Пишем команду: git add preferences.xml skills.xml && git commit -m "Commit preferences.xml and skills.xml"

 30. Отправить сразу 2 файла на внешний репозиторий.
 Пишем команду: git push

 31. На веб интерфейсе создать файл bug_report.xml
 В GitHab нажимаем "Add file" --> "Create new file" --> пишем название файла "bug_report.xml"
 
 32. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Нажимаем кнопку "Commit changes" --> при необходимости заполняем поле "Extended description" и нажимаем "Commit changes".

 33. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 Открываем файл "bug_report.xml" --> выбираем иконку "Edit this file" --> пишем баг репорт:
 <bug_report>
    <id>111</id>
    <summary>The filter is not reset when the 'Filter reset' button is pressed</summary>
    <steps>
        <step>Go to exe.ua</step>
        <step>In the catalog, select the category 'PC components', 'Video cards'</step>
        <step>Filtering goods by 'graphic chip'. Choose from the list RTX 3060 Ti</step>
        <step>Press the 'Filter products' button</step>
        <step>Press the 'Filter reset' button</step>
    </steps>
    <expected_result>The filter is reset</expected_result>
    <actual_result>The filter is not reset</actual_result>
    <severity>Low</severity>
    <priority>Medium</priority>
    <type>Functional</type>
    <assigned>Artem M</assigned>
    <state>Open</state>
    <date_of_creation>01-11-2022</date_of_creation>
    <environment>Windows 10, Chrome 106.0.5249.119</environment>
    <attachment>https://...</attachment>
</bug_report>

 34. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Нажимаем кнопку "Commit changes" --> при необходимости заполняем поле "Extended description" и нажимаем "Commit changes".
 
 35. Синхронизировать внешний и локальный репозиторий XML
 Пишем в терминале команду: git pull origin main



TXT

 36. Создать внешний репозиторий c названием TXT.
 В GitHub нажимаем "New" --> в "Repository name" пишем TXT и нажимаем кнопку "Create repository".
 
 37. Клонировать репозиторий TXT на локальный компьютер.
 Через терминал заходим в необходимую папку на компе: cd QA/GIT (/Users/artemm/QA/GIT). Пишем в терминале команду: git clone и вставляем ссылку из GitHub: https://github.com/Artemm13/TXT.git

 38. Внутри локального TXT создать файл “new.txt”.
 В терминале пишем команду: touch new.txt

 39. Добавить файл под гит.
 В терминале пишем команду: git add .

 40. Закоммитить файл.
 В терминале пишем команду: git commit -m "Commit txt"

 41. Отправить файл на внешний GitHub репозиторий.
 В терминале пишем команду: git push

 42. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 Пишем команду: vim new.json В открывшемся редакторе нажимаем клавишу "i" и пишем текст: 
Name: Mishchenko Artem
Age: 37
Namber of pets: 1
Future salary: $4000	
Переходим в нормальный режим (клавиша "esc"), сохраняем - :w, и выходим - :q.

 43. Отправить изменения на внешний репозиторий.
 Пишем: git add . && git commit -m "Changes txt" && git push

 44. Создать файл preferences.txt
 Пишем команду: touch preferences.txt

 45. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 Пишем команду: vim preferences.json и пишем текст редакторе:
Favorite movie: Matrix
Favourite show: Friends
Favourite food: Kebab
Favourite time of year: Autumn
Country you would like to visit: Netherlands

 46. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 Пишем команды: touch skills.json
                vim skills.json
Skills:
- Linux terminal;
- GitHub;
- Postman;
- SQL;
- DevTools;
- Mobile testing;
- Fidler and Charle.

 47. Сделать коммит в одну строку.
 Пишем команду: git add . && git commit -m "Commit preferences.txt and skills.txt"

 48. Отправить сразу 2 файла на внешний репозиторий.
 Пишем команду: git push

 49. На веб интерфейсе создать файл bug_report.txt.
 В GitHab нажимаем "Add file" --> "Create new file" --> пишем название файла "bug_report.txt"

 50. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Нажимаем кнопку "Commit changes" --> при необходимости заполняем поле "Extended description" и нажимаем "Commit changes"

 51. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 Открываем файл "bug_report.txt" --> выбираем иконку "Edit this file" --> пишем баг репорт:
id: 111
summary: The filter is not reset when the 'Filter reset' button is pressed
steps: 1. Go to exe.ua
       2. In the catalog, select the category 'PC components', 'Video cards'
       3. Filtering goods by 'graphic chip'. Choose from the list RTX 3060 Ti
       4. Press the 'Filter products' button
       5. Press the 'Filter reset' button
expected_result: The filter is reset
actual_result: The filter is not reset
severity: Low
priority: Medium
type: Functional
assigned: Artem M
state: Open
date of creation: 01-11-2022
environment: Windows 10, Chrome 106.0.5249.119
attachment: https://...

 52. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 Нажимаем кнопку "Commit changes" --> при необходимости заполняем поле "Extended description" и нажимаем "Commit changes".

 53. Синхронизировать внешний и локальный репозиторий TXT
 Пишем в терминале команду: git pull origin main
